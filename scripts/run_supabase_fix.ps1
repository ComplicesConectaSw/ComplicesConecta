# =====================================================
# SCRIPT POWERSHELL PARA EJECUTAR CORRECCI√ìN AUTOM√ÅTICA SUPABASE
# ComplicesConecta v2.1.2 - Sistema de Correcci√≥n Autom√°tica
# Fecha: 06 de septiembre, 2025 - 05:27 hrs
# =====================================================

Write-Host "ü§ñ SISTEMA AUTOM√ÅTICO DE CORRECCI√ìN SUPABASE" -ForegroundColor Cyan
Write-Host "üéØ ComplicesConecta v2.1.2 - Auto-Fix System" -ForegroundColor Green
Write-Host "‚è∞ Iniciado: $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')" -ForegroundColor Yellow
Write-Host "=" * 60 -ForegroundColor Gray

# Verificar que Node.js est√© disponible
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js detectado: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Node.js no est√° instalado o no est√° en PATH" -ForegroundColor Red
    Write-Host "üí° Instala Node.js desde: https://nodejs.org/" -ForegroundColor Yellow
    exit 1
}

# Verificar que estamos en el directorio correcto
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Error: No se encuentra package.json" -ForegroundColor Red
    Write-Host "üí° Ejecuta este script desde la ra√≠z del proyecto ComplicesConecta" -ForegroundColor Yellow
    exit 1
}

# Verificar archivo .env
if (-not (Test-Path ".env")) {
    Write-Host "‚ùå Error: No se encuentra archivo .env" -ForegroundColor Red
    Write-Host "üí° Crea el archivo .env con las credenciales de Supabase" -ForegroundColor Yellow
    exit 1
}

Write-Host "`nüîç PASO 1: EJECUTANDO AUDITOR√çA AUTOM√ÅTICA" -ForegroundColor Cyan
Write-Host "=" * 40 -ForegroundColor Gray

# Ejecutar el sistema autom√°tico de correcci√≥n
try {
    Write-Host "üöÄ Iniciando sistema autom√°tico..." -ForegroundColor Yellow
    node scripts/supabase_auto_fix.js
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Sistema autom√°tico ejecutado exitosamente" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Sistema completado con advertencias (c√≥digo: $LASTEXITCODE)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Error ejecutando sistema autom√°tico: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host "`nüìä PASO 2: VERIFICANDO RESULTADOS" -ForegroundColor Cyan
Write-Host "=" * 35 -ForegroundColor Gray

# Verificar que se generaron los reportes
if (Test-Path "reports/auto_fix_report.md") {
    Write-Host "‚úÖ Reporte generado: reports/auto_fix_report.md" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è No se encontr√≥ reporte de correcci√≥n" -ForegroundColor Yellow
}

if (Test-Path "reports/auto_fix_data.json") {
    Write-Host "‚úÖ Datos de auditor√≠a: reports/auto_fix_data.json" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è No se encontraron datos de auditor√≠a" -ForegroundColor Yellow
}

# Verificar scripts SQL generados
$sqlScripts = @(
    "scripts/auto_fix_database.sql",
    "scripts/auto_fix_rls.sql", 
    "scripts/auto_fix_buckets.sql",
    "scripts/auto_fix_indexes.sql"
)

Write-Host "`nüõ†Ô∏è SCRIPTS SQL GENERADOS:" -ForegroundColor Cyan
foreach ($script in $sqlScripts) {
    if (Test-Path $script) {
        Write-Host "‚úÖ $script" -ForegroundColor Green
    } else {
        Write-Host "‚ö™ $script (no necesario)" -ForegroundColor Gray
    }
}

Write-Host "`nüìã PASO 3: INSTRUCCIONES DE APLICACI√ìN" -ForegroundColor Cyan
Write-Host "=" * 40 -ForegroundColor Gray

Write-Host "Para aplicar las correcciones en Supabase:" -ForegroundColor White
Write-Host ""
Write-Host "1Ô∏è‚É£ Conectar a Supabase SQL Editor:" -ForegroundColor Yellow
Write-Host "   https://supabase.com/dashboard/project/[PROJECT-ID]/sql" -ForegroundColor Cyan
Write-Host ""
Write-Host "2Ô∏è‚É£ Ejecutar scripts en orden:" -ForegroundColor Yellow

foreach ($script in $sqlScripts) {
    if (Test-Path $script) {
        Write-Host "   üìÑ Copiar y ejecutar: $script" -ForegroundColor Cyan
    }
}

Write-Host ""
Write-Host "3Ô∏è‚É£ Validar correcciones:" -ForegroundColor Yellow
Write-Host "   üìÑ Ejecutar: scripts/validate_after_fix.sql" -ForegroundColor Cyan
Write-Host ""

# Mostrar resumen del reporte si existe
if (Test-Path "reports/auto_fix_data.json") {
    try {
        $reportData = Get-Content "reports/auto_fix_data.json" | ConvertFrom-Json
        $finalScore = [math]::Round(($reportData.finalAudit.score / $reportData.finalAudit.maxScore) * 100)
        
        Write-Host "üìä RESUMEN DE RESULTADOS:" -ForegroundColor Cyan
        Write-Host "   üéØ Puntuaci√≥n Final: $finalScore/100" -ForegroundColor $(if ($finalScore -ge 95) { "Green" } elseif ($finalScore -ge 85) { "Yellow" } else { "Red" })
        Write-Host "   üîß Correcciones Aplicadas: $($reportData.initialAudit.fixes.Count)" -ForegroundColor White
        Write-Host "   üìÅ Scripts Generados: $($reportData.report.scriptsGenerated)" -ForegroundColor White
        Write-Host "   üöÄ Estado: $($reportData.report.status)" -ForegroundColor $(if ($finalScore -ge 95) { "Green" } else { "Yellow" })
    } catch {
        Write-Host "‚ö†Ô∏è No se pudo leer el resumen del reporte" -ForegroundColor Yellow
    }
}

Write-Host "`nüéâ SISTEMA AUTOM√ÅTICO COMPLETADO" -ForegroundColor Green
Write-Host "=" * 35 -ForegroundColor Gray
Write-Host "üìÅ Revisa los archivos generados en /reports/ y /scripts/" -ForegroundColor White
Write-Host "üîó Aplica las correcciones en Supabase SQL Editor" -ForegroundColor White
Write-Host "üìä Re-ejecuta este script despu√©s de aplicar correcciones" -ForegroundColor White
Write-Host ""
Write-Host "‚è∞ Completado: $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')" -ForegroundColor Yellow
