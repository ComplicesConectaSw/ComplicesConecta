-- =====================================================
-- AUDITOR√çA COMPLETA Y REPARACI√ìN AUTOM√ÅTICA SUPABASE
-- ComplicesConecta v2.1.1 - Sistema de Validaci√≥n Integral
-- Fecha: 06 de septiembre, 2025 - 04:59 hrs
-- =====================================================

-- üîç PASO 1: VERIFICACI√ìN DE TABLAS CR√çTICAS
DO $$
DECLARE
    tabla_faltante TEXT;
    tablas_criticas TEXT[] := ARRAY[
        'profiles', 'user_roles', 'invitations', 'gallery_permissions',
        'images', 'image_permissions', 'gallery_access_requests',
        'chat_rooms', 'chat_members', 'messages', 'chat_invitations',
        'user_likes', 'matches', 'match_interactions'
    ];
    tabla TEXT;
    contador_tablas INTEGER := 0;
BEGIN
    RAISE NOTICE 'üîç === INICIANDO AUDITOR√çA COMPLETA SUPABASE ===';
    RAISE NOTICE '‚è∞ Fecha: %', NOW();
    
    RAISE NOTICE 'üìã 1. VERIFICANDO TABLAS CR√çTICAS...';
    
    FOREACH tabla IN ARRAY tablas_criticas
    LOOP
        IF EXISTS (SELECT 1 FROM information_schema.tables 
                  WHERE table_schema = 'public' AND table_name = tabla) THEN
            contador_tablas := contador_tablas + 1;
            RAISE NOTICE '‚úÖ Tabla % existe', tabla;
        ELSE
            RAISE NOTICE '‚ùå FALTA: Tabla %', tabla;
        END IF;
    END LOOP;
    
    RAISE NOTICE 'üìä RESULTADO TABLAS: %/% existentes', contador_tablas, array_length(tablas_criticas, 1);
END $$;

-- üîç PASO 2: VERIFICACI√ìN DE COLUMNAS CR√çTICAS EN PROFILES
DO $$
DECLARE
    columnas_criticas TEXT[] := ARRAY[
        'interests', 'looking_for', 'swinger_experience', 
        'age_range_min', 'age_range_max', 'max_distance'
    ];
    columna TEXT;
    contador_columnas INTEGER := 0;
BEGIN
    RAISE NOTICE 'üìã 2. VERIFICANDO COLUMNAS CR√çTICAS EN PROFILES...';
    
    FOREACH columna IN ARRAY columnas_criticas
    LOOP
        IF EXISTS (SELECT 1 FROM information_schema.columns 
                  WHERE table_schema = 'public' 
                  AND table_name = 'profiles' 
                  AND column_name = columna) THEN
            contador_columnas := contador_columnas + 1;
            RAISE NOTICE '‚úÖ Columna profiles.% existe', columna;
        ELSE
            RAISE NOTICE '‚ùå FALTA: Columna profiles.%', columna;
        END IF;
    END LOOP;
    
    RAISE NOTICE 'üìä RESULTADO COLUMNAS: %/% existentes', contador_columnas, array_length(columnas_criticas, 1);
END $$;

-- üîç PASO 3: VERIFICACI√ìN DE RLS Y POL√çTICAS
DO $$
DECLARE
    tabla TEXT;
    tablas_criticas TEXT[] := ARRAY[
        'profiles', 'user_roles', 'invitations', 'gallery_permissions',
        'images', 'image_permissions', 'gallery_access_requests',
        'chat_rooms', 'chat_members', 'messages', 'chat_invitations',
        'user_likes', 'matches', 'match_interactions'
    ];
    rls_activo BOOLEAN;
    num_politicas INTEGER;
    contador_rls INTEGER := 0;
    total_politicas INTEGER := 0;
BEGIN
    RAISE NOTICE 'üîí 3. VERIFICANDO RLS Y POL√çTICAS DE SEGURIDAD...';
    
    FOREACH tabla IN ARRAY tablas_criticas
    LOOP
        -- Verificar si la tabla existe primero
        IF EXISTS (SELECT 1 FROM information_schema.tables 
                  WHERE table_schema = 'public' AND table_name = tabla) THEN
            
            -- Verificar RLS activo
            SELECT relrowsecurity INTO rls_activo
            FROM pg_class c
            JOIN pg_namespace n ON c.relnamespace = n.oid
            WHERE n.nspname = 'public' AND c.relname = tabla;
            
            -- Contar pol√≠ticas
            SELECT COUNT(*) INTO num_politicas
            FROM pg_policies 
            WHERE schemaname = 'public' AND tablename = tabla;
            
            IF rls_activo THEN
                contador_rls := contador_rls + 1;
                total_politicas := total_politicas + num_politicas;
                RAISE NOTICE '‚úÖ % - RLS: ‚úì | Pol√≠ticas: %', tabla, num_politicas;
            ELSE
                RAISE NOTICE '‚ùå % - RLS: ‚úó | Pol√≠ticas: %', tabla, num_politicas;
            END IF;
        END IF;
    END LOOP;
    
    RAISE NOTICE 'üìä RESULTADO RLS: %/% tablas con RLS activo', contador_rls, array_length(tablas_criticas, 1);
    RAISE NOTICE 'üìä TOTAL POL√çTICAS: % pol√≠ticas implementadas', total_politicas;
END $$;

-- üîç PASO 4: VERIFICACI√ìN DE FUNCIONES CR√çTICAS
DO $$
DECLARE
    funciones_criticas TEXT[] := ARRAY[
        'has_role', 'handle_new_user', 'update_updated_at_column', 
        'exec_sql', 'detect_mutual_match', 'get_user_matches', 'get_potential_matches'
    ];
    funcion TEXT;
    contador_funciones INTEGER := 0;
    funciones_faltantes TEXT[] := '{}';
BEGIN
    RAISE NOTICE '‚öôÔ∏è 4. VERIFICANDO FUNCIONES CR√çTICAS...';
    
    FOREACH funcion IN ARRAY funciones_criticas
    LOOP
        IF EXISTS (SELECT 1 FROM information_schema.routines 
                  WHERE routine_schema = 'public' 
                  AND routine_name = funcion 
                  AND routine_type = 'FUNCTION') THEN
            contador_funciones := contador_funciones + 1;
            RAISE NOTICE '‚úÖ Funci√≥n % existe', funcion;
        ELSE
            funciones_faltantes := array_append(funciones_faltantes, funcion);
            RAISE NOTICE '‚ùå FALTA: Funci√≥n %', funcion;
        END IF;
    END LOOP;
    
    RAISE NOTICE 'üìä RESULTADO FUNCIONES: %/% existentes', contador_funciones, array_length(funciones_criticas, 1);
    
    -- Mostrar funciones faltantes para correcci√≥n
    IF array_length(funciones_faltantes, 1) > 0 THEN
        RAISE NOTICE 'üîß FUNCIONES PENDIENTES DE CREAR: %', array_to_string(funciones_faltantes, ', ');
    END IF;
END $$;

-- üîç PASO 5: VERIFICACI√ìN DE TRIGGERS
DO $$
DECLARE
    triggers_criticos TEXT[] := ARRAY[
        'trg_profiles_updated_at', 'trg_invitations_updated_at', 
        'trg_images_updated_at', 'on_auth_user_created'
    ];
    trigger_name TEXT;
    contador_triggers INTEGER := 0;
BEGIN
    RAISE NOTICE 'üîÑ 5. VERIFICANDO TRIGGERS AUTOM√ÅTICOS...';
    
    FOREACH trigger_name IN ARRAY triggers_criticos
    LOOP
        IF EXISTS (SELECT 1 FROM information_schema.triggers 
                  WHERE trigger_schema = 'public' 
                  AND trigger_name = trigger_name) THEN
            contador_triggers := contador_triggers + 1;
            RAISE NOTICE '‚úÖ Trigger % existe', trigger_name;
        ELSE
            RAISE NOTICE '‚ùå FALTA: Trigger %', trigger_name;
        END IF;
    END LOOP;
    
    RAISE NOTICE 'üìä RESULTADO TRIGGERS: %/% existentes', contador_triggers, array_length(triggers_criticos, 1);
END $$;

-- üîç PASO 6: VERIFICACI√ìN DE BUCKETS DE STORAGE
DO $$
DECLARE
    buckets_criticos TEXT[] := ARRAY['profile-images', 'gallery-images', 'chat-media'];
    bucket_name TEXT;
    contador_buckets INTEGER := 0;
BEGIN
    RAISE NOTICE 'üóÑÔ∏è 6. VERIFICANDO BUCKETS DE STORAGE...';
    
    FOREACH bucket_name IN ARRAY buckets_criticos
    LOOP
        IF EXISTS (SELECT 1 FROM storage.buckets WHERE name = bucket_name) THEN
            contador_buckets := contador_buckets + 1;
            RAISE NOTICE '‚úÖ Bucket % existe', bucket_name;
        ELSE
            RAISE NOTICE '‚ùå FALTA: Bucket %', bucket_name;
        END IF;
    END LOOP;
    
    RAISE NOTICE 'üìä RESULTADO BUCKETS: %/% existentes', contador_buckets, array_length(buckets_criticos, 1);
END $$;

-- üîç PASO 7: VERIFICACI√ìN DE √çNDICES DE PERFORMANCE
DO $$
DECLARE
    contador_indices INTEGER;
BEGIN
    RAISE NOTICE 'üöÄ 7. VERIFICANDO √çNDICES DE PERFORMANCE...';
    
    SELECT COUNT(*) INTO contador_indices
    FROM pg_indexes 
    WHERE schemaname = 'public' 
    AND indexname NOT LIKE '%_pkey';
    
    RAISE NOTICE 'üìä √çNDICES PERSONALIZADOS: % √≠ndices encontrados', contador_indices;
    
    -- Mostrar algunos √≠ndices cr√≠ticos
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE schemaname = 'public' AND indexname LIKE '%profiles%') THEN
        RAISE NOTICE '‚úÖ √çndices de profiles encontrados';
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE schemaname = 'public' AND indexname LIKE '%matches%') THEN
        RAISE NOTICE '‚úÖ √çndices de matches encontrados';
    END IF;
END $$;

-- üìä RESUMEN FINAL DE AUDITOR√çA
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üìä === RESUMEN FINAL DE AUDITOR√çA ===';
    RAISE NOTICE '‚è∞ Completado: %', NOW();
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Auditor√≠a completa ejecutada';
    RAISE NOTICE 'üîç Verificadas: Tablas, Columnas, RLS, Funciones, Triggers, Buckets, √çndices';
    RAISE NOTICE '';
    RAISE NOTICE 'üîß PR√ìXIMO PASO: Ejecutar script de correcciones autom√°ticas';
    RAISE NOTICE 'üìÅ Archivo: scripts/correcciones_automaticas_supabase.sql';
    RAISE NOTICE '';
    RAISE NOTICE '=== FIN DE AUDITOR√çA ===';
END $$;
