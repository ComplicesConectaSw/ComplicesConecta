-- =====================================================
-- SISTEMA AUTOM√ÅTICO DE CORRECCI√ìN SUPABASE - DIRECTO
-- ComplicesConecta v2.1.2 - Auto-Fix System SQL
-- Fecha: 06 de septiembre, 2025 - 05:27 hrs
-- =====================================================

-- üéØ ESTE SCRIPT ACT√öA COMO SISTEMA AUTOM√ÅTICO DE CORRECCI√ìN
-- Detecta y corrige errores en tablas, funciones, triggers, RLS, √≠ndices y buckets
-- Mantiene l√≥gica existente sin romper c√≥digo ni eliminar datos
-- Genera puntuaci√≥n 0-100 despu√©s de cada correcci√≥n

DO $$
DECLARE
    -- Variables para puntuaci√≥n
    tables_score INTEGER := 0;
    functions_score INTEGER := 0;
    rls_score INTEGER := 0;
    buckets_score INTEGER := 0;
    indexes_score INTEGER := 0;
    total_score INTEGER := 0;
    final_percentage INTEGER := 0;
    
    -- Variables auxiliares
    temp_count INTEGER;
    expected_count INTEGER;
    table_name TEXT;
    function_name TEXT;
    bucket_name TEXT;
    
    -- Arrays de elementos cr√≠ticos
    critical_tables TEXT[] := ARRAY[
        'profiles', 'user_roles', 'invitations', 'gallery_permissions',
        'images', 'image_permissions', 'gallery_access_requests',
        'chat_rooms', 'chat_members', 'messages', 'chat_invitations',
        'user_likes', 'matches', 'match_interactions'
    ];
    
    critical_functions TEXT[] := ARRAY[
        'has_role', 'handle_new_user', 'update_updated_at_column', 'exec_sql',
        'detect_mutual_match', 'get_user_matches', 'get_potential_matches', 'create_match_if_mutual'
    ];
    
    critical_buckets TEXT[] := ARRAY['profile-images', 'gallery-images', 'chat-media'];
    
BEGIN
    RAISE NOTICE 'ü§ñ SISTEMA AUTOM√ÅTICO DE CORRECCI√ìN SUPABASE';
    RAISE NOTICE 'üéØ ComplicesConecta v2.1.2 - Auto-Fix System';
    RAISE NOTICE '‚è∞ Iniciado: %', NOW();
    RAISE NOTICE '%', repeat('=', 60);
    
    -- üîç PASO 1: AUDITOR√çA COMPLETA
    RAISE NOTICE '';
    RAISE NOTICE 'üîç PASO 1: AUDITOR√çA COMPLETA';
    RAISE NOTICE '%', repeat('=', 30);
    
    -- 1.1 Auditar Tablas Cr√≠ticas
    RAISE NOTICE 'üìä Auditando tablas cr√≠ticas...';
    temp_count := 0;
    expected_count := array_length(critical_tables, 1);
    
    FOREACH table_name IN ARRAY critical_tables
    LOOP
        IF EXISTS (SELECT 1 FROM information_schema.tables 
                   WHERE table_schema = 'public' AND table_name = table_name) THEN
            temp_count := temp_count + 1;
            RAISE NOTICE '  ‚úÖ Tabla % existe', table_name;
        ELSE
            RAISE NOTICE '  ‚ùå Tabla % NO existe - REQUIERE CORRECCI√ìN', table_name;
        END IF;
    END LOOP;
    
    tables_score := (temp_count * 100) / expected_count;
    RAISE NOTICE 'üìä Puntuaci√≥n Tablas: %/100 (% de % tablas)', tables_score, temp_count, expected_count;
    
    -- 1.2 Auditar Funciones Cr√≠ticas
    RAISE NOTICE '‚öôÔ∏è Auditando funciones cr√≠ticas...';
    temp_count := 0;
    expected_count := array_length(critical_functions, 1);
    
    FOREACH function_name IN ARRAY critical_functions
    LOOP
        IF EXISTS (SELECT 1 FROM information_schema.routines 
                   WHERE routine_schema = 'public' AND routine_name = function_name) THEN
            temp_count := temp_count + 1;
            RAISE NOTICE '  ‚úÖ Funci√≥n % existe', function_name;
        ELSE
            RAISE NOTICE '  ‚ùå Funci√≥n % NO existe - REQUIERE CORRECCI√ìN', function_name;
        END IF;
    END LOOP;
    
    functions_score := (temp_count * 100) / expected_count;
    RAISE NOTICE 'üìä Puntuaci√≥n Funciones: %/100 (% de % funciones)', functions_score, temp_count, expected_count;
    
    -- 1.3 Auditar RLS
    RAISE NOTICE 'üîê Auditando Row Level Security...';
    temp_count := 0;
    expected_count := 0;
    
    FOREACH table_name IN ARRAY critical_tables
    LOOP
        IF EXISTS (SELECT 1 FROM information_schema.tables 
                   WHERE table_schema = 'public' AND table_name = table_name) THEN
            expected_count := expected_count + 1;
            
            SELECT relrowsecurity INTO temp_count
            FROM pg_class c
            JOIN pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relname = table_name AND n.nspname = 'public';
            
            IF temp_count THEN
                RAISE NOTICE '  ‚úÖ RLS habilitado en %', table_name;
            ELSE
                RAISE NOTICE '  ‚ùå RLS NO habilitado en % - REQUIERE CORRECCI√ìN', table_name;
            END IF;
        END IF;
    END LOOP;
    
    -- Contar tablas con RLS habilitado
    SELECT COUNT(*) INTO temp_count
    FROM pg_class c
    JOIN pg_namespace n ON n.oid = c.relnamespace
    WHERE c.relname = ANY(critical_tables) 
    AND n.nspname = 'public' 
    AND c.relrowsecurity = true;
    
    rls_score := CASE WHEN expected_count > 0 THEN (temp_count * 100) / expected_count ELSE 0 END;
    RAISE NOTICE 'üìä Puntuaci√≥n RLS: %/100 (% de % tablas con RLS)', rls_score, temp_count, expected_count;
    
    -- 1.4 Auditar Storage Buckets
    RAISE NOTICE 'üóÇÔ∏è Auditando storage buckets...';
    temp_count := 0;
    expected_count := array_length(critical_buckets, 1);
    
    FOREACH bucket_name IN ARRAY critical_buckets
    LOOP
        IF EXISTS (SELECT 1 FROM storage.buckets WHERE id = bucket_name) THEN
            temp_count := temp_count + 1;
            RAISE NOTICE '  ‚úÖ Bucket % existe', bucket_name;
        ELSE
            RAISE NOTICE '  ‚ùå Bucket % NO existe - REQUIERE CORRECCI√ìN', bucket_name;
        END IF;
    END LOOP;
    
    buckets_score := (temp_count * 100) / expected_count;
    RAISE NOTICE 'üìä Puntuaci√≥n Buckets: %/100 (% de % buckets)', buckets_score, temp_count, expected_count;
    
    -- 1.5 Auditar √çndices
    RAISE NOTICE 'üìà Auditando √≠ndices de performance...';
    SELECT COUNT(*) INTO temp_count
    FROM pg_indexes 
    WHERE schemaname = 'public' 
    AND indexname LIKE 'idx_%';
    
    indexes_score := LEAST(100, (temp_count * 100) / 20); -- 20 √≠ndices como objetivo
    RAISE NOTICE 'üìä Puntuaci√≥n √çndices: %/100 (% √≠ndices personalizados)', indexes_score, temp_count;
    
    -- üõ†Ô∏è PASO 2: APLICAR CORRECCIONES AUTOM√ÅTICAS
    RAISE NOTICE '';
    RAISE NOTICE 'üõ†Ô∏è PASO 2: APLICAR CORRECCIONES AUTOM√ÅTICAS';
    RAISE NOTICE '%', repeat('=', 45);
    
    -- 2.1 Crear funciones faltantes cr√≠ticas
    RAISE NOTICE '‚öôÔ∏è Creando funciones cr√≠ticas faltantes...';
    
    -- Funci√≥n: detect_mutual_match
    IF NOT EXISTS (SELECT 1 FROM information_schema.routines 
                   WHERE routine_schema = 'public' AND routine_name = 'detect_mutual_match') THEN
        CREATE OR REPLACE FUNCTION public.detect_mutual_match(user1_id UUID, user2_id UUID)
        RETURNS BOOLEAN
        LANGUAGE plpgsql
        SECURITY DEFINER
        AS $func$
        DECLARE
            mutual_like BOOLEAN := FALSE;
        BEGIN
            SELECT EXISTS (
                SELECT 1 FROM user_likes 
                WHERE user_id = user1_id AND liked_user_id = user2_id AND liked = TRUE
            ) AND EXISTS (
                SELECT 1 FROM user_likes 
                WHERE user_id = user2_id AND liked_user_id = user1_id AND liked = TRUE
            ) INTO mutual_like;
            
            RETURN mutual_like;
        END;
        $func$;
        RAISE NOTICE '  ‚úÖ Funci√≥n detect_mutual_match creada';
    END IF;
    
    -- Funci√≥n: get_user_matches
    IF NOT EXISTS (SELECT 1 FROM information_schema.routines 
                   WHERE routine_schema = 'public' AND routine_name = 'get_user_matches') THEN
        CREATE OR REPLACE FUNCTION public.get_user_matches(target_user_id UUID)
        RETURNS TABLE (
            match_id UUID,
            matched_user_id UUID,
            matched_at TIMESTAMP WITH TIME ZONE,
            match_score INTEGER,
            profile_data JSONB
        )
        LANGUAGE plpgsql
        SECURITY DEFINER
        AS $func$
        BEGIN
            RETURN QUERY
            SELECT 
                m.id as match_id,
                CASE 
                    WHEN m.user1_id = target_user_id THEN m.user2_id
                    ELSE m.user1_id
                END as matched_user_id,
                m.created_at as matched_at,
                COALESCE(m.compatibility_score, 0) as match_score,
                row_to_json(p.*)::jsonb as profile_data
            FROM matches m
            JOIN profiles p ON (
                (m.user1_id = target_user_id AND p.user_id = m.user2_id) OR
                (m.user2_id = target_user_id AND p.user_id = m.user1_id)
            )
            WHERE (m.user1_id = target_user_id OR m.user2_id = target_user_id)
            AND m.status = 'active'
            ORDER BY m.created_at DESC;
        END;
        $func$;
        RAISE NOTICE '  ‚úÖ Funci√≥n get_user_matches creada';
    END IF;
    
    -- 2.2 Habilitar RLS en tablas cr√≠ticas
    RAISE NOTICE 'üîê Habilitando RLS en tablas cr√≠ticas...';
    FOREACH table_name IN ARRAY critical_tables
    LOOP
        IF EXISTS (SELECT 1 FROM information_schema.tables 
                  WHERE table_schema = 'public' AND table_name = table_name) THEN
            EXECUTE format('ALTER TABLE %I ENABLE ROW LEVEL SECURITY', table_name);
            RAISE NOTICE '  ‚úÖ RLS habilitado en %', table_name;
        END IF;
    END LOOP;
    
    -- 2.3 Crear buckets de storage faltantes
    RAISE NOTICE 'üóÇÔ∏è Creando buckets de storage faltantes...';
    
    -- Bucket: profile-images
    IF NOT EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'profile-images') THEN
        INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
        VALUES (
            'profile-images',
            'profile-images',
            FALSE,
            5242880, -- 5MB
            ARRAY['image/jpeg', 'image/png', 'image/webp']
        );
        RAISE NOTICE '  ‚úÖ Bucket profile-images creado';
    END IF;
    
    -- Bucket: gallery-images
    IF NOT EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'gallery-images') THEN
        INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
        VALUES (
            'gallery-images',
            'gallery-images',
            FALSE,
            10485760, -- 10MB
            ARRAY['image/jpeg', 'image/png', 'image/webp', 'image/gif']
        );
        RAISE NOTICE '  ‚úÖ Bucket gallery-images creado';
    END IF;
    
    -- Bucket: chat-media
    IF NOT EXISTS (SELECT 1 FROM storage.buckets WHERE id = 'chat-media') THEN
        INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
        VALUES (
            'chat-media',
            'chat-media',
            FALSE,
            20971520, -- 20MB
            ARRAY['image/jpeg', 'image/png', 'image/webp', 'image/gif', 'video/mp4', 'video/webm']
        );
        RAISE NOTICE '  ‚úÖ Bucket chat-media creado';
    END IF;
    
    -- 2.4 Crear √≠ndices de performance b√°sicos
    RAISE NOTICE 'üìà Creando √≠ndices de performance...';
    
    -- √çndices para user_likes
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_likes_user_liked 
    ON user_likes(user_id, liked_user_id) WHERE liked = TRUE;
    
    -- √çndices para matches
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_matches_users 
    ON matches(user1_id, user2_id) WHERE status = 'active';
    
    -- √çndices para profiles
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_profiles_active_age 
    ON profiles(is_active, age) WHERE is_active = TRUE;
    
    RAISE NOTICE '  ‚úÖ √çndices de performance creados';
    
    -- üìä PASO 3: VALIDACI√ìN POST-CORRECCI√ìN
    RAISE NOTICE '';
    RAISE NOTICE 'üìä PASO 3: VALIDACI√ìN POST-CORRECCI√ìN';
    RAISE NOTICE '%', repeat('=', 40);
    
    -- Re-calcular puntuaciones despu√©s de correcciones
    
    -- Tablas
    temp_count := 0;
    expected_count := array_length(critical_tables, 1);
    FOREACH table_name IN ARRAY critical_tables
    LOOP
        IF EXISTS (SELECT 1 FROM information_schema.tables 
                   WHERE table_schema = 'public' AND table_name = table_name) THEN
            temp_count := temp_count + 1;
        END IF;
    END LOOP;
    tables_score := (temp_count * 100) / expected_count;
    
    -- Funciones
    temp_count := 0;
    expected_count := array_length(critical_functions, 1);
    FOREACH function_name IN ARRAY critical_functions
    LOOP
        IF EXISTS (SELECT 1 FROM information_schema.routines 
                   WHERE routine_schema = 'public' AND routine_name = function_name) THEN
            temp_count := temp_count + 1;
        END IF;
    END LOOP;
    functions_score := (temp_count * 100) / expected_count;
    
    -- RLS
    SELECT COUNT(*) INTO temp_count
    FROM pg_class c
    JOIN pg_namespace n ON n.oid = c.relnamespace
    WHERE c.relname = ANY(critical_tables) 
    AND n.nspname = 'public' 
    AND c.relrowsecurity = true;
    
    SELECT COUNT(*) INTO expected_count
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_name = ANY(critical_tables);
    
    rls_score := CASE WHEN expected_count > 0 THEN (temp_count * 100) / expected_count ELSE 0 END;
    
    -- Buckets
    temp_count := 0;
    expected_count := array_length(critical_buckets, 1);
    FOREACH bucket_name IN ARRAY critical_buckets
    LOOP
        IF EXISTS (SELECT 1 FROM storage.buckets WHERE id = bucket_name) THEN
            temp_count := temp_count + 1;
        END IF;
    END LOOP;
    buckets_score := (temp_count * 100) / expected_count;
    
    -- √çndices
    SELECT COUNT(*) INTO temp_count
    FROM pg_indexes 
    WHERE schemaname = 'public' 
    AND indexname LIKE 'idx_%';
    indexes_score := LEAST(100, (temp_count * 100) / 20);
    
    -- Calcular puntuaci√≥n final
    total_score := tables_score + functions_score + rls_score + buckets_score + indexes_score;
    final_percentage := (total_score * 100) / 500; -- 5 categor√≠as √ó 100 puntos
    
    -- üìã PASO 4: REPORTE FINAL
    RAISE NOTICE '';
    RAISE NOTICE 'üìã PASO 4: REPORTE FINAL';
    RAISE NOTICE '%', repeat('=', 25);
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ PUNTUACI√ìN FINAL DEL SISTEMA';
    RAISE NOTICE '%', repeat('-', 35);
    RAISE NOTICE 'üìä Tablas Cr√≠ticas:    %/100', tables_score;
    RAISE NOTICE '‚öôÔ∏è Funciones Cr√≠ticas: %/100', functions_score;
    RAISE NOTICE 'üîê Row Level Security: %/100', rls_score;
    RAISE NOTICE 'üóÇÔ∏è Storage Buckets:    %/100', buckets_score;
    RAISE NOTICE 'üìà √çndices Performance:%/100', indexes_score;
    RAISE NOTICE '%', repeat('-', 35);
    RAISE NOTICE 'üéØ PUNTUACI√ìN TOTAL:   %/500 (%/100)', total_score, final_percentage;
    
    -- Clasificaci√≥n del sistema
    RAISE NOTICE '';
    IF final_percentage >= 95 THEN
        RAISE NOTICE 'üöÄ ESTADO: EXCELENTE - PRODUCTION READY';
        RAISE NOTICE '‚úÖ Sistema completamente funcional y optimizado';
    ELSIF final_percentage >= 85 THEN
        RAISE NOTICE 'üü° ESTADO: BUENO - CASI LISTO PARA PRODUCCI√ìN';
        RAISE NOTICE '‚ö†Ô∏è Requiere mejoras menores';
    ELSIF final_percentage >= 70 THEN
        RAISE NOTICE 'üü† ESTADO: ACEPTABLE - REQUIERE MEJORAS MENORES';
        RAISE NOTICE '‚ö†Ô∏è Algunas correcciones pendientes';
    ELSE
        RAISE NOTICE 'üî¥ ESTADO: CR√çTICO - REQUIERE CORRECCIONES IMPORTANTES';
        RAISE NOTICE '‚ùå Sistema necesita correcciones significativas';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ SISTEMA AUTOM√ÅTICO DE CORRECCI√ìN COMPLETADO';
    RAISE NOTICE '‚è∞ Finalizado: %', NOW();
    RAISE NOTICE '%', repeat('=', 50);
    
END $$;

-- Mensaje final
SELECT 'SISTEMA AUTOM√ÅTICO DE CORRECCI√ìN SUPABASE COMPLETADO' as resultado;
