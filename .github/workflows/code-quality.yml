name: Verificación de Calidad de Código

on:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
        
    - name: Install dependencies
      run: |
        # Limpiar cache y reinstalar para evitar problemas con dependencias nativas
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install --legacy-peer-deps --omit=optional
      
    - name: Ejecutar ESLint
      run: npm run lint
      
    - name: Custom Next.js 14 linting rules
      run: |
        echo "Ejecutando reglas de linting personalizadas para Next.js 14..."
        
        # Verificar componentes cliente que reciben funciones directamente
        echo "Verificando patrones de Client Components..."
        FILES_WITH_ISSUES=$(grep -r --include="*.tsx" --include="*.jsx" "Icon as={" src/ || true)
        if [ ! -z "$FILES_WITH_ISSUES" ]; then
          echo "⚠️ Advertencia: Se detectaron posibles problemas con Client Components en los siguientes archivos:"
          echo "$FILES_WITH_ISSUES"
          echo "Se recomienda cambiar 'Icon as={IconComponent}' por renderizar los iconos dentro de un componente Box."
        fi
        
        # Verificar exportaciones de metadata
        echo "Verificando exportaciones de metadata..."
        FILES_WITH_METADATA=$(grep -r --include="*.tsx" --include="*.jsx" --exclude="*layout.tsx" "export const metadata" src/ || true)
        if [ ! -z "$FILES_WITH_METADATA" ]; then
          echo "⚠️ Advertencia: Se detectaron posibles problemas con exportaciones de metadata en los siguientes archivos:"
          echo "$FILES_WITH_METADATA"
          echo "Las exportaciones de metadata solo deben hacerse desde componentes layout.tsx en el servidor."
        fi
        
        # Verificar modularidad de los componentes
        echo "Generando informe de complejidad ciclomática..."
        npm exec eslint --no-eslintrc --rule "complexity: ['error', 10]" -f json src/ > complexity-report.json || true
        
        echo "✅ Análisis de calidad de código completado"
        
  type-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
        
    - name: Install dependencies
      run: |
        # Limpiar cache y reinstalar para evitar problemas con dependencias nativas
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install --legacy-peer-deps --omit=optional
      
    - name: Run TypeScript checks
      run: npx tsc --noEmit
      
    - name: Custom TypeScript validation
      run: |
        echo "Ejecutando validaciones personalizadas de TypeScript..."
        
        # Verificar tipos en componentes específicos
        echo "Verificando tipos en componentes críticos..."
        npx tsc --noEmit src/hooks/useAuth.ts || echo "⚠️ Advertencia: Posibles problemas de tipos en useAuth.ts"
        npx tsc --noEmit src/integrations/supabase/client.ts || echo "⚠️ Advertencia: Posibles problemas de tipos en supabase.ts"
        
        # Verificar validación de variables de entorno
        echo "Verificando validación de variables de entorno..."
        if ! grep -q "process.env.*||.*''" src/integrations/supabase/client.ts; then
          echo "⚠️ Advertencia: El cliente Supabase podría no tener validación adecuada de variables de entorno"
        fi
        
        # Verificar conversiones de .tsx a .jsx donde sea necesario
        echo "Verificando componentes sin tipos que deberían ser .jsx..."
        FILES_WITHOUT_TYPES=$(grep -rL --include="*.tsx" "type\|interface" src/components || true)
        if [ ! -z "$FILES_WITHOUT_TYPES" ]; then
          echo "ℹ️ Información: Los siguientes archivos no tienen definiciones de tipos y podrían convertirse a .jsx:"
          echo "$FILES_WITHOUT_TYPES"
        fi
        
        echo "✅ Validación de TypeScript completada"
        
  css-integration:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
        
    - name: Install dependencies
      run: |
        # Limpiar cache y reinstalar para evitar problemas con dependencias nativas
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install --legacy-peer-deps --omit=optional
      
    - name: Verify TW-Elements integration
      run: |
        echo "Verificando integración de TW-Elements..."
        
        # Verificar configuración en tailwind.config.ts
        if grep -q "tailwindcss" tailwind.config.ts; then
          echo "✅ Tailwind CSS está configurado correctamente"
        else
          echo "⚠️ Advertencia: Tailwind CSS no está configurado correctamente"
        fi
        
        # Verificar importación en index.css
        if grep -q "@import" src/index.css; then
          echo "✅ Tailwind CSS está importado en index.css"
        else
          echo "⚠️ Advertencia: Tailwind CSS no está importado en index.css"
        fi
        
        # Verificar que las clases de Tailwind se estén utilizando
        if grep -rq "className=" src/; then
          echo "✅ Se están utilizando clases de Tailwind CSS"
        else
          echo "ℹ️ Información: No se detectaron clases de Tailwind CSS en el código"
        fi
        
        echo "✅ Verificación de integración CSS completada"
        
  compile-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
        
    - name: Install dependencies
      run: |
        # Limpiar cache y reinstalar para evitar problemas con dependencias nativas
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install --legacy-peer-deps --omit=optional
      
    - name: Run compilation test
      run: |
        echo "Ejecutando prueba de compilación..."
        
        # Forzar el uso de Rollup WASM para evitar errores con binarios nativos
        export ROLLUP_NO_NATIVE=1
        
        # Compilar aplicación Vite/React
        NODE_ENV=production npm run build
        
        echo "✅ Prueba de compilación completada con éxito"
