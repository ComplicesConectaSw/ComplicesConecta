-- =====================================================
-- CREACIÓN SELECTIVA DE TABLAS FALTANTES
-- Solo crear las tablas que no existen
-- =====================================================

-- Verificar y crear solo las tablas que faltan
DO $$
BEGIN
    -- 1. token_analytics
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'token_analytics' AND table_schema = 'public') THEN
        CREATE TABLE token_analytics (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            period_type TEXT NOT NULL CHECK (period_type IN ('hourly', 'daily', 'weekly', 'monthly')),
            period_start TIMESTAMPTZ NOT NULL,
            period_end TIMESTAMPTZ NOT NULL,
            total_cmpx_supply BIGINT DEFAULT 1000000,
            total_gtk_supply BIGINT DEFAULT 5000000,
            circulating_cmpx BIGINT DEFAULT 0,
            circulating_gtk BIGINT DEFAULT 0,
            transaction_count INTEGER DEFAULT 0,
            transaction_volume_cmpx BIGINT DEFAULT 0,
            transaction_volume_gtk BIGINT DEFAULT 0,
            total_staked_cmpx BIGINT DEFAULT 0,
            active_stakers INTEGER DEFAULT 0,
            metadata JSONB DEFAULT '{}',
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        RAISE NOTICE '✅ Tabla token_analytics creada';
    ELSE
        RAISE NOTICE '⚠️ Tabla token_analytics ya existe';
    END IF;

    -- 2. user_token_balances
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'user_token_balances' AND table_schema = 'public') THEN
        CREATE TABLE user_token_balances (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            cmpx_balance BIGINT DEFAULT 0 CHECK (cmpx_balance >= 0),
            gtk_balance BIGINT DEFAULT 0 CHECK (gtk_balance >= 0),
            total_earned_cmpx BIGINT DEFAULT 0,
            total_earned_gtk BIGINT DEFAULT 0,
            last_updated TIMESTAMPTZ DEFAULT NOW(),
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW(),
            UNIQUE(user_id)
        );
        RAISE NOTICE '✅ Tabla user_token_balances creada';
    ELSE
        RAISE NOTICE '⚠️ Tabla user_token_balances ya existe';
    END IF;

    -- 3. staking_records
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'staking_records' AND table_schema = 'public') THEN
        CREATE TABLE staking_records (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            amount BIGINT NOT NULL CHECK (amount > 0),
            token_type TEXT NOT NULL CHECK (token_type IN ('cmpx', 'gtk')),
            staking_duration INTEGER NOT NULL CHECK (staking_duration > 0),
            apy_percentage DECIMAL(5,2) DEFAULT 0.00,
            is_active BOOLEAN DEFAULT true,
            start_date TIMESTAMPTZ DEFAULT NOW(),
            end_date TIMESTAMPTZ,
            rewards_earned BIGINT DEFAULT 0,
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        RAISE NOTICE '✅ Tabla staking_records creada';
    ELSE
        RAISE NOTICE '⚠️ Tabla staking_records ya existe';
    END IF;

    -- 4. token_transactions
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'token_transactions' AND table_schema = 'public') THEN
        CREATE TABLE token_transactions (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            from_user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
            to_user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
            amount BIGINT NOT NULL CHECK (amount > 0),
            token_type TEXT NOT NULL CHECK (token_type IN ('cmpx', 'gtk')),
            transaction_type TEXT NOT NULL CHECK (transaction_type IN ('transfer', 'reward', 'purchase', 'staking', 'unstaking')),
            description TEXT,
            metadata JSONB DEFAULT '{}',
            status TEXT DEFAULT 'completed' CHECK (status IN ('pending', 'completed', 'failed', 'cancelled')),
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        RAISE NOTICE '✅ Tabla token_transactions creada';
    ELSE
        RAISE NOTICE '⚠️ Tabla token_transactions ya existe';
    END IF;

    -- 5. invitations
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'invitations' AND table_schema = 'public') THEN
        CREATE TABLE invitations (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            inviter_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            invited_user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
            invitee_email TEXT,
            invitation_type TEXT DEFAULT 'general',
            type TEXT NOT NULL CHECK (type IN ('gallery', 'chat', 'meetup', 'general')),
            status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'declined', 'expired')),
            expires_at TIMESTAMPTZ,
            metadata JSONB DEFAULT '{}',
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        RAISE NOTICE '✅ Tabla invitations creada';
    ELSE
        RAISE NOTICE '⚠️ Tabla invitations ya existe';
    END IF;

    -- 6. gallery_permissions
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'gallery_permissions' AND table_schema = 'public') THEN
        CREATE TABLE gallery_permissions (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            gallery_owner_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            granted_by UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            granted_to UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
            permission_type TEXT NOT NULL CHECK (permission_type IN ('view', 'comment', 'share')),
            status TEXT DEFAULT 'active' CHECK (status IN ('active', 'revoked', 'expired')),
            expires_at TIMESTAMPTZ,
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        RAISE NOTICE '✅ Tabla gallery_permissions creada';
    ELSE
        RAISE NOTICE '⚠️ Tabla gallery_permissions ya existe';
    END IF;

    -- 7. invitation_templates
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'invitation_templates' AND table_schema = 'public') THEN
        CREATE TABLE invitation_templates (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            template_name TEXT NOT NULL,
            template_content TEXT NOT NULL,
            template_type TEXT NOT NULL,
            is_active BOOLEAN DEFAULT true,
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        RAISE NOTICE '✅ Tabla invitation_templates creada';
    ELSE
        RAISE NOTICE '⚠️ Tabla invitation_templates ya existe';
    END IF;

    -- 8. invitation_statistics
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'invitation_statistics' AND table_schema = 'public') THEN
        CREATE TABLE invitation_statistics (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
            total_invitations INTEGER DEFAULT 0,
            pending_invitations INTEGER DEFAULT 0,
            accepted_invitations INTEGER DEFAULT 0,
            declined_invitations INTEGER DEFAULT 0,
            expired_invitations INTEGER DEFAULT 0,
            acceptance_rate DECIMAL(5,2) DEFAULT 0.00,
            period_start TIMESTAMPTZ DEFAULT NOW(),
            period_end TIMESTAMPTZ DEFAULT NOW(),
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        RAISE NOTICE '✅ Tabla invitation_statistics creada';
    ELSE
        RAISE NOTICE '⚠️ Tabla invitation_statistics ya existe';
    END IF;

END $$;

-- Crear índices solo si no existen
CREATE INDEX IF NOT EXISTS idx_token_analytics_period ON token_analytics(period_type, period_start);
CREATE INDEX IF NOT EXISTS idx_user_token_balances_user ON user_token_balances(user_id);
CREATE INDEX IF NOT EXISTS idx_staking_records_user ON staking_records(user_id);
CREATE INDEX IF NOT EXISTS idx_staking_records_active ON staking_records(is_active);
CREATE INDEX IF NOT EXISTS idx_token_transactions_from ON token_transactions(from_user_id);
CREATE INDEX IF NOT EXISTS idx_token_transactions_to ON token_transactions(to_user_id);
CREATE INDEX IF NOT EXISTS idx_invitations_inviter ON invitations(inviter_id);
CREATE INDEX IF NOT EXISTS idx_invitations_invited ON invitations(invited_user_id);
CREATE INDEX IF NOT EXISTS idx_invitations_status ON invitations(status);
CREATE INDEX IF NOT EXISTS idx_gallery_permissions_owner ON gallery_permissions(gallery_owner_id);
CREATE INDEX IF NOT EXISTS idx_gallery_permissions_granted_to ON gallery_permissions(granted_to);
CREATE INDEX IF NOT EXISTS idx_invitation_templates_active ON invitation_templates(is_active);
CREATE INDEX IF NOT EXISTS idx_invitation_statistics_user ON invitation_statistics(user_id);

-- Habilitar RLS solo si no está habilitado
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'token_analytics' AND relrowsecurity = true) THEN
        ALTER TABLE token_analytics ENABLE ROW LEVEL SECURITY;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'user_token_balances' AND relrowsecurity = true) THEN
        ALTER TABLE user_token_balances ENABLE ROW LEVEL SECURITY;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'staking_records' AND relrowsecurity = true) THEN
        ALTER TABLE staking_records ENABLE ROW LEVEL SECURITY;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'token_transactions' AND relrowsecurity = true) THEN
        ALTER TABLE token_transactions ENABLE ROW LEVEL SECURITY;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'invitations' AND relrowsecurity = true) THEN
        ALTER TABLE invitations ENABLE ROW LEVEL SECURITY;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'gallery_permissions' AND relrowsecurity = true) THEN
        ALTER TABLE gallery_permissions ENABLE ROW LEVEL SECURITY;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'invitation_templates' AND relrowsecurity = true) THEN
        ALTER TABLE invitation_templates ENABLE ROW LEVEL SECURITY;
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'invitation_statistics' AND relrowsecurity = true) THEN
        ALTER TABLE invitation_statistics ENABLE ROW LEVEL SECURITY;
    END IF;
END $$;

-- Insertar datos iniciales solo si no existen
INSERT INTO invitation_templates (template_name, template_content, template_type, is_active) VALUES
('Invitación General', 'Te invitamos a conocer nuestra comunidad swinger. ¡Únete y descubre nuevas experiencias!', 'general', true),
('Invitación Galería', 'Te invitamos a ver nuestra galería privada. ¡Acepta para acceder a contenido exclusivo!', 'gallery', true),
('Invitación Chat', 'Te invitamos a chatear con nosotros. ¡Conectemos y conozcámonos mejor!', 'chat', true),
('Invitación Encuentro', 'Te invitamos a un encuentro discreto. ¡Responde si estás interesado!', 'meetup', true)
ON CONFLICT DO NOTHING;

-- Verificar estado final
DO $$
DECLARE
    table_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO table_count
    FROM information_schema.tables
    WHERE table_schema = 'public'
    AND table_name IN (
        'token_analytics', 'user_token_balances', 'staking_records',
        'token_transactions', 'couple_profiles', 'invitations',
        'gallery_permissions', 'invitation_templates', 'invitation_statistics'
    );
    
    RAISE NOTICE '📊 Estado final: % de 9 tablas de servicios disponibles', table_count;
END $$;
