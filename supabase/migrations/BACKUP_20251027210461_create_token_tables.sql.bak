-- Migraci√≥n: Crear tablas de tokens y permisos
-- ComplicesConecta v3.4.1
-- Fecha: 2025-01-28

-- Tabla: user_token_balances
CREATE TABLE IF NOT EXISTS user_token_balances (
  user_id text PRIMARY KEY,
  cmpx_balance integer DEFAULT 0 NOT NULL,
  gtk_balance integer DEFAULT 0 NOT NULL,
  worldid_verified boolean DEFAULT false,
  worldid_nullifier_hash text,
  worldid_verified_at timestamp with time zone,
  total_earned integer DEFAULT 0 NOT NULL,
  total_spent integer DEFAULT 0 NOT NULL,
  last_updated timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- √çndices para user_token_balances
CREATE INDEX IF NOT EXISTS idx_user_token_balances_user_id ON user_token_balances(user_id);
CREATE INDEX IF NOT EXISTS idx_user_token_balances_worldid_verified ON user_token_balances(worldid_verified) WHERE worldid_verified = true;
CREATE INDEX IF NOT EXISTS idx_user_token_balances_worldid_nullifier ON user_token_balances(worldid_nullifier_hash) WHERE worldid_nullifier_hash IS NOT NULL;

-- Trigger para last_updated
CREATE OR REPLACE FUNCTION update_user_token_balances_updated()
RETURNS TRIGGER AS $$
BEGIN
  NEW.last_updated = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS tr_user_token_balances_updated ON user_token_balances;
CREATE TRIGGER tr_user_token_balances_updated
  BEFORE UPDATE ON user_token_balances
  FOR EACH ROW
  EXECUTE FUNCTION update_user_token_balances_updated();

-- Tabla: referral_rewards
CREATE TABLE IF NOT EXISTS referral_rewards (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id text NOT NULL,
  referral_code text,
  reward_amount integer NOT NULL DEFAULT 0,
  reward_type text NOT NULL,
  verification_method text,
  worldid_proof jsonb,
  status text CHECK (status IN ('pending', 'completed', 'cancelled')) DEFAULT 'pending',
  claimed boolean DEFAULT false,
  claimed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- √çndices para referral_rewards
CREATE INDEX IF NOT EXISTS idx_referral_rewards_user_id ON referral_rewards(user_id);
CREATE INDEX IF NOT EXISTS idx_referral_rewards_referral_code ON referral_rewards(referral_code);
CREATE INDEX IF NOT EXISTS idx_referral_rewards_verification_method ON referral_rewards(verification_method);
CREATE INDEX IF NOT EXISTS idx_referral_rewards_status ON referral_rewards(status);
CREATE INDEX IF NOT EXISTS idx_referral_rewards_created_at ON referral_rewards(created_at DESC);

-- Trigger para updated_at en referral_rewards
CREATE OR REPLACE FUNCTION update_referral_rewards_updated()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS tr_referral_rewards_updated ON referral_rewards;
CREATE TRIGGER tr_referral_rewards_updated
  BEFORE UPDATE ON referral_rewards
  FOR EACH ROW
  EXECUTE FUNCTION update_referral_rewards_updated();

-- Tabla: gallery_permissions
CREATE TABLE IF NOT EXISTS gallery_permissions (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  profile_id text NOT NULL,
  granted_to text NOT NULL,
  granted_by text NOT NULL,
  status text CHECK (status IN ('active', 'revoked', 'expired')) DEFAULT 'active',
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  UNIQUE(profile_id, granted_to)
);

-- √çndices para gallery_permissions
CREATE INDEX IF NOT EXISTS idx_gallery_permissions_profile_id ON gallery_permissions(profile_id);
CREATE INDEX IF NOT EXISTS idx_gallery_permissions_granted_to ON gallery_permissions(granted_to);
CREATE INDEX IF NOT EXISTS idx_gallery_permissions_status ON gallery_permissions(status);
CREATE INDEX IF NOT EXISTS idx_gallery_permissions_expires_at ON gallery_permissions(expires_at) WHERE expires_at IS NOT NULL;

-- Trigger para updated_at en gallery_permissions
CREATE OR REPLACE FUNCTION update_gallery_permissions_updated()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = timezone('utc'::text, now());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS tr_gallery_permissions_updated ON gallery_permissions;
CREATE TRIGGER tr_gallery_permissions_updated
  BEFORE UPDATE ON gallery_permissions
  FOR EACH ROW
  EXECUTE FUNCTION update_gallery_permissions_updated();

-- Comentarios
COMMENT ON TABLE user_token_balances IS 'Balance de tokens de usuarios (CMPX y GTK)';
COMMENT ON TABLE referral_rewards IS 'Recompensas por referidos y verificaciones';
COMMENT ON TABLE gallery_permissions IS 'Permisos de acceso a galer√≠as privadas';

-- Insertar datos de ejemplo para user_token_balances
INSERT INTO user_token_balances (user_id, cmpx_balance, gtk_balance)
SELECT id, 100, 50 FROM profiles
WHERE is_demo = true
ON CONFLICT (user_id) DO NOTHING;

-- Notificaci√≥n de finalizaci√≥n
DO $$ 
BEGIN
  RAISE NOTICE '‚úÖ Tablas de tokens creadas exitosamente';
  RAISE NOTICE 'üìä Tablas creadas: 3';
  RAISE NOTICE 'üîç √çndices creados: 13';
  RAISE NOTICE '‚ö° Triggers creados: 3';
END $$;

