create extension if not exists "pgjwt" with schema "extensions";


drop trigger if exists "trg_profiles_updated_at" on "public"."profiles";

drop policy "Admins can delete any profile" on "public"."profiles";

drop policy "Admins can insert any profile" on "public"."profiles";

drop policy "Admins can update any profile" on "public"."profiles";

drop policy "Profiles are viewable by authenticated users" on "public"."profiles";

drop policy "Users can delete their own profile" on "public"."profiles";

drop policy "Users can insert their own profile" on "public"."profiles";

drop policy "Users can update their own profile" on "public"."profiles";

drop policy "Admins can delete roles" on "public"."user_roles";

drop policy "Admins can insert roles" on "public"."user_roles";

drop policy "Admins can update roles" on "public"."user_roles";

drop policy "Admins can view all roles" on "public"."user_roles";

drop policy "Users can view their own roles" on "public"."user_roles";

revoke delete on table "public"."profiles" from "anon";

revoke insert on table "public"."profiles" from "anon";

revoke references on table "public"."profiles" from "anon";

revoke select on table "public"."profiles" from "anon";

revoke trigger on table "public"."profiles" from "anon";

revoke truncate on table "public"."profiles" from "anon";

revoke update on table "public"."profiles" from "anon";

revoke delete on table "public"."profiles" from "authenticated";

revoke insert on table "public"."profiles" from "authenticated";

revoke references on table "public"."profiles" from "authenticated";

revoke select on table "public"."profiles" from "authenticated";

revoke trigger on table "public"."profiles" from "authenticated";

revoke truncate on table "public"."profiles" from "authenticated";

revoke update on table "public"."profiles" from "authenticated";

revoke delete on table "public"."profiles" from "service_role";

revoke insert on table "public"."profiles" from "service_role";

revoke references on table "public"."profiles" from "service_role";

revoke select on table "public"."profiles" from "service_role";

revoke trigger on table "public"."profiles" from "service_role";

revoke truncate on table "public"."profiles" from "service_role";

revoke update on table "public"."profiles" from "service_role";

revoke delete on table "public"."user_roles" from "anon";

revoke insert on table "public"."user_roles" from "anon";

revoke references on table "public"."user_roles" from "anon";

revoke select on table "public"."user_roles" from "anon";

revoke trigger on table "public"."user_roles" from "anon";

revoke truncate on table "public"."user_roles" from "anon";

revoke update on table "public"."user_roles" from "anon";

revoke delete on table "public"."user_roles" from "authenticated";

revoke insert on table "public"."user_roles" from "authenticated";

revoke references on table "public"."user_roles" from "authenticated";

revoke select on table "public"."user_roles" from "authenticated";

revoke trigger on table "public"."user_roles" from "authenticated";

revoke truncate on table "public"."user_roles" from "authenticated";

revoke update on table "public"."user_roles" from "authenticated";

revoke delete on table "public"."user_roles" from "service_role";

revoke insert on table "public"."user_roles" from "service_role";

revoke references on table "public"."user_roles" from "service_role";

revoke select on table "public"."user_roles" from "service_role";

revoke trigger on table "public"."user_roles" from "service_role";

revoke truncate on table "public"."user_roles" from "service_role";

revoke update on table "public"."user_roles" from "service_role";

alter table "public"."profiles" drop constraint "profiles_age_check";

alter table "public"."profiles" drop constraint "profiles_id_fkey";

alter table "public"."user_roles" drop constraint "user_roles_user_id_fkey";

alter table "public"."user_roles" drop constraint "user_roles_user_id_role_key";

drop function if exists "public"."delete_current_user"();

drop function if exists "public"."has_role"(_user_id uuid, _role app_role);

drop function if exists "public"."initialize_current_user_profile"();

drop function if exists "public"."update_updated_at_column"();

alter table "public"."profiles" drop constraint "profiles_pkey";

alter table "public"."user_roles" drop constraint "user_roles_pkey";

drop index if exists "public"."profiles_pkey";

drop index if exists "public"."user_roles_pkey";

drop index if exists "public"."user_roles_user_id_role_key";

drop table "public"."profiles";

drop table "public"."user_roles";

create table "public"."police complicesconecta" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."police complicesconecta" enable row level security;

drop type "public"."app_role";

CREATE UNIQUE INDEX "police complicesconecta_pkey" ON public."police complicesconecta" USING btree (id);

alter table "public"."police complicesconecta" add constraint "police complicesconecta_pkey" PRIMARY KEY using index "police complicesconecta_pkey";


